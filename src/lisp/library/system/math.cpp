
#include "lisp/common.h"
#include "lisp/library/libraries.h"
#include "prelude.h"

using namespace craft;
using namespace craft::types;
using namespace craft::lisp;
using namespace craft::lisp::library;
using namespace craft::lisp::library::helper;


#ifdef _MSC_FULL_VER 
#pragma warning(disable: 4018 4805 4804)
#endif

void system::make_math_globals(instance<Module>& ret, instance<Namespace>& ns) {
	auto env = ns->environment();
	auto _operator_float32 = instance<MultiMethod>::make();
	auto _operator_float64 = instance<MultiMethod>::make();
	auto _operator_int16 = instance<MultiMethod>::make();
	auto _operator_int32 = instance<MultiMethod>::make();
	auto _operator_int64 = instance<MultiMethod>::make();
	auto _operator_int8 = instance<MultiMethod>::make();
	auto _operator_uint16 = instance<MultiMethod>::make();
	auto _operator_uint32 = instance<MultiMethod>::make();
	auto _operator_uint64 = instance<MultiMethod>::make();
	auto _operator_uint8 = instance<MultiMethod>::make();
	auto _operator_div = instance<MultiMethod>::make();
	auto _operator_mul = instance<MultiMethod>::make();
	auto _operator_plu = instance<MultiMethod>::make();
	auto _operator_sub = instance<MultiMethod>::make();
	auto _operator_eq = instance<MultiMethod>::make();
	auto _operator_gt = instance<MultiMethod>::make();
	auto _operator_gte = instance<MultiMethod>::make();
	auto _operator_lt = instance<MultiMethod>::make();
	auto _operator_lte = instance<MultiMethod>::make();
	auto _operator_neq = instance<MultiMethod>::make();

	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, float>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, float>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, float>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, float>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, float>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, float>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, float>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, float>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, float>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, double>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, double>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, double>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, double>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, double>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, double>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, double>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, double>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, double>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int16_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int16_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int16_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int16_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int16_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int16_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int16_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int16_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int16_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int32_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int32_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int32_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int32_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int32_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int32_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int32_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int32_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int32_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int64_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int64_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int64_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int64_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int64_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int64_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int64_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int64_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int64_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int8_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int8_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int8_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int8_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int8_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int8_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int8_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int8_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int8_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint16_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint16_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint16_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint16_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint16_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint16_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint16_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint16_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint16_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint32_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint32_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint32_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint32_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint32_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint32_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint32_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint32_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint32_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint64_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint64_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint64_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint64_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint64_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint64_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint64_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint64_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint64_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint8_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint8_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint8_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint8_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint8_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint8_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint8_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint8_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint8_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));

	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, float>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<float>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, double>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<double>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, int16_t>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<int16_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, int32_t>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<int32_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, int64_t>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<int64_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, int8_t>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<int8_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, uint16_t>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<uint16_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, uint32_t>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<uint32_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, uint64_t>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<uint64_t>::make(*a / *b); }));
	_operator_div->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, uint8_t>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<uint8_t>::make(*a / *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, float>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<float>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, double>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<double>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, int16_t>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<int16_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, int32_t>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<int32_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, int64_t>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<int64_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, int8_t>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<int8_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, uint16_t>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<uint16_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, uint32_t>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<uint32_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, uint64_t>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<uint64_t>::make(*a * *b); }));
	_operator_mul->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, uint8_t>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<uint8_t>::make(*a * *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, float>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<float>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, double>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<double>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, int16_t>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<int16_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, int32_t>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<int32_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, int64_t>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<int64_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, int8_t>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<int8_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, uint16_t>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<uint16_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, uint32_t>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<uint32_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, uint64_t>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<uint64_t>::make(*a + *b); }));
	_operator_plu->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, uint8_t>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<uint8_t>::make(*a + *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, float>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<float>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, double>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<double>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, int16_t>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<int16_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, int32_t>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<int32_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, int64_t>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<int64_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, int8_t>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<int8_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, uint16_t>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<uint16_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, uint32_t>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<uint32_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, uint64_t>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<uint64_t>::make(*a - *b); }));
	_operator_sub->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, uint8_t>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<uint8_t>::make(*a - *b); }));

	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a != *b); }));

	ret->define_eval("float32", _operator_float32);
	ret->define_eval("float64", _operator_float64);
	ret->define_eval("int16", _operator_int16);
	ret->define_eval("int32", _operator_int32);
	ret->define_eval("int64", _operator_int64);
	ret->define_eval("int8", _operator_int8);
	ret->define_eval("uint16", _operator_uint16);
	ret->define_eval("uint32", _operator_uint32);
	ret->define_eval("uint64", _operator_uint64);
	ret->define_eval("uint8", _operator_uint8);
	ret->define_eval("/", _operator_div);
	ret->define_eval("*", _operator_mul);
	ret->define_eval("+", _operator_plu);
	ret->define_eval("-", _operator_sub);
	ret->define_eval("==", _operator_eq);
	ret->define_eval(">", _operator_gt);
	ret->define_eval(">=", _operator_gte);
	ret->define_eval("<", _operator_lt);
	ret->define_eval("<=", _operator_lte);
	ret->define_eval("!=", _operator_neq);
}
