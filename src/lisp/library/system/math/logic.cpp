
#include "lisp/common.h"
#include "lisp/library/libraries.h"
#include "../prelude.h"

using namespace craft;
using namespace craft::types;
using namespace craft::lisp;
using namespace craft::lisp::library;
using namespace craft::lisp::library::helper;

void core::make_logic_globals(instance<Module> ret)
{
	auto _operator_eq = instance<MultiMethod>::make();
	auto _operator_gt = instance<MultiMethod>::make();
	auto _operator_gte = instance<MultiMethod>::make();
	auto _operator_lt = instance<MultiMethod>::make();
	auto _operator_lte = instance<MultiMethod>::make();
	auto _operator_neq = instance<MultiMethod>::make();

	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_eq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a == *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a > *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_gte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a >= *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lt->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a < *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_lte->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a <= *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float, bool>(), [](auto frame, auto args) { instance<float> a(expect<float>(args[0])); instance<float> b(expect<float>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double, bool>(), [](auto frame, auto args) { instance<double> a(expect<double>(args[0])); instance<double> b(expect<double>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t, bool>(), [](auto frame, auto args) { instance<int16_t> a(expect<int16_t>(args[0])); instance<int16_t> b(expect<int16_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t, bool>(), [](auto frame, auto args) { instance<int32_t> a(expect<int32_t>(args[0])); instance<int32_t> b(expect<int32_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t, bool>(), [](auto frame, auto args) { instance<int64_t> a(expect<int64_t>(args[0])); instance<int64_t> b(expect<int64_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t, bool>(), [](auto frame, auto args) { instance<int8_t> a(expect<int8_t>(args[0])); instance<int8_t> b(expect<int8_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t, bool>(), [](auto frame, auto args) { instance<uint16_t> a(expect<uint16_t>(args[0])); instance<uint16_t> b(expect<uint16_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t, bool>(), [](auto frame, auto args) { instance<uint32_t> a(expect<uint32_t>(args[0])); instance<uint32_t> b(expect<uint32_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t, bool>(), [](auto frame, auto args) { instance<uint64_t> a(expect<uint64_t>(args[0])); instance<uint64_t> b(expect<uint64_t>(args[1])); return instance<bool>::make(*a != *b); }));
	_operator_neq->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t, bool>(), [](auto frame, auto args) { instance<uint8_t> a(expect<uint8_t>(args[0])); instance<uint8_t> b(expect<uint8_t>(args[1])); return instance<bool>::make(*a != *b); }));

	ret->define_eval("==", _operator_eq);
	ret->define_eval(">", _operator_gt);
	ret->define_eval(">=", _operator_gte);
	ret->define_eval("<", _operator_lt);
	ret->define_eval("<=", _operator_lte);
	ret->define_eval("!=", _operator_neq);
}