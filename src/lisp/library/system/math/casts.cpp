
#include "lisp/common.h"
#include "lisp/library/libraries.h"
#include "../prelude.h"

using namespace craft;
using namespace craft::types;
using namespace craft::lisp;
using namespace craft::lisp::library;
using namespace craft::lisp::library::helper;


void system::make_cast_globals(instance<Module>& ret, instance<Namespace>& ns) {
	auto env = ns->environment();
	auto _operator_float32 = instance<MultiMethod>::make();
	auto _operator_float64 = instance<MultiMethod>::make();
	auto _operator_int16 = instance<MultiMethod>::make();
	auto _operator_int32 = instance<MultiMethod>::make();
	auto _operator_int64 = instance<MultiMethod>::make();
	auto _operator_int8 = instance<MultiMethod>::make();
	auto _operator_uint16 = instance<MultiMethod>::make();
	auto _operator_uint32 = instance<MultiMethod>::make();
	auto _operator_uint64 = instance<MultiMethod>::make();
	auto _operator_uint8 = instance<MultiMethod>::make();

	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, float>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, float>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, float>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, float>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, float>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, float>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, float>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, float>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, float>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, float>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<float>::make(float(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, double>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, double>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, double>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, double>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, double>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, double>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, double>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, double>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, double>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_float64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, double>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<double>::make(double(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int16_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int16_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int16_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int16_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int16_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int16_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int16_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int16_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int16_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int16_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int16_t>::make(int16_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int32_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int32_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int32_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int32_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int32_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int32_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int32_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int32_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int32_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int32_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int32_t>::make(int32_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int64_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int64_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int64_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int64_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int64_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int64_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int64_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int64_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int64_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int64_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int64_t>::make(int64_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, int8_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, int8_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, int8_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, int8_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, int8_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, int8_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, int8_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, int8_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, int8_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_int8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, int8_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<int8_t>::make(int8_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint16_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint16_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint16_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint16_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint16_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint16_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint16_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint16_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint16_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint16->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint16_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint16_t>::make(uint16_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint32_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint32_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint32_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint32_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint32_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint32_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint32_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint32_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint32_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint32->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint32_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint32_t>::make(uint32_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint64_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint64_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint64_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint64_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint64_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint64_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint64_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint64_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint64_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint64->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint64_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint64_t>::make(uint64_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<float, uint8_t>(), [](auto frame, auto args) {instance<float> a(expect<float>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<double, uint8_t>(), [](auto frame, auto args) {instance<double> a(expect<double>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int16_t, uint8_t>(), [](auto frame, auto args) {instance<int16_t> a(expect<int16_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int32_t, uint8_t>(), [](auto frame, auto args) {instance<int32_t> a(expect<int32_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int64_t, uint8_t>(), [](auto frame, auto args) {instance<int64_t> a(expect<int64_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<int8_t, uint8_t>(), [](auto frame, auto args) {instance<int8_t> a(expect<int8_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint16_t, uint8_t>(), [](auto frame, auto args) {instance<uint16_t> a(expect<uint16_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint32_t, uint8_t>(), [](auto frame, auto args) {instance<uint32_t> a(expect<uint32_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint64_t, uint8_t>(), [](auto frame, auto args) {instance<uint64_t> a(expect<uint64_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));
	_operator_uint8->attach(env, instance<BuiltinFunction>::make(SubroutineSignature::makeFromArgsAndReturn<uint8_t, uint8_t>(), [](auto frame, auto args) {instance<uint8_t> a(expect<uint8_t>(args[0])); return instance<uint8_t>::make(uint8_t(*a)); }));

	ret->define_eval("float32", _operator_float32);
	ret->define_eval("float64", _operator_float64);
	ret->define_eval("int16", _operator_int16);
	ret->define_eval("int32", _operator_int32);
	ret->define_eval("int64", _operator_int64);
	ret->define_eval("int8", _operator_int8);
	ret->define_eval("uint16", _operator_uint16);
	ret->define_eval("uint32", _operator_uint32);
	ret->define_eval("uint64", _operator_uint64);
	ret->define_eval("uint8", _operator_uint8);
}